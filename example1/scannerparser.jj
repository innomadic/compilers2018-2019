PARSER_BEGIN(MyParser)
   class MyParser {
    public static void main( String[] args ) throws ParseException, TokenMgrError {
      MyParser parser = new MyParser( System.in ) ;
      parser.Start() ;}
   }
PARSER_END(MyParser)
/* For the regular expressions on the right, the token on the left will be returned: */
TOKEN : {
    < IF: "if" >
| < #DIGIT: ["0"-"9"] >
| < ID: ["a"-"z"] (["a"-"z"]|<DIGIT>)* >
| < NUM: (<DIGIT>)+ >
| < REAL: ( (<DIGIT>)+ "." (<DIGIT>)* ) |
( (<DIGIT>)* "." (<DIGIT>)+ )>
}
/* The regular expressions here will be skipped during lexical analysis: */
SKIP : {
<"--" (["a"-"z"])* ("\n" | "\r" | "\r\n")>
 | " " | "\t" | "\n"
}
/* If we have a substring that does not match any of the regular expressions in TOKEN or SKIP, JavaCC will automatically throw an error. */
void Start() :
{}
{ (<IF>|<ID>|<NUM>|<REAL>)* }
